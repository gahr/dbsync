#!/usr/bin/env bash

# Copyright (C) 2020-2022 Pietro Cerutti <gahr@gahr.ch>
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

# Usage: dbsync [-q -y] <local-file> <remote-file> ...

DBSYNC_HOME="$HOME/.config/dbsync"
DBSYNC_FILES_ENDPOINT=https://api.dropboxapi.com/2/files
DBSYNC_CONTENT_ENDPOINT=https://content.dropboxapi.com/2/files
DBSYNC_APP_WEBSITE=https://www.dropbox.com/developers/apps
DBSYNC_TOKEN_FILE="${DBSYNC_HOME}"/token 
DBSYNC_YES=0
DBSYNC_QUIET=0

function epoch_to_iso()
{
    local epoch

    epoch="${1}"

    TZ=UTC date -j -f %s "${epoch}" +"%Y-%m-%dT%H:%M:%SZ"
}

function iso_to_epoch()
{
    local iso

    iso="${1}"

    TZ=UTC date -j -f '%Y-%m-%dT%H:%M:%SZ' "${iso}" +%s 
}

function db_gen_token()
{
    local token

    while [ ! -f "${DBSYNC_TOKEN_FILE}" ]; do

        echo "Follow these instructions to generate a Dropbox access token:"
        echo ""
        echo " 1. Log into the Dropbox apps page: ${DBSYNC_APP_WEBSITE}"
        echo " 2. Click on \"Create app\""
        echo " 3. At the \"Choose an API\" step, select \"Scoped access\""
        echo " 4. At the \"Choose the type of access you need\" step, select \"Full Dropbox\""
        echo " 5. Choose a unique and descriptive name for your app"
        echo " 6. Click on \"Create app\""
        echo " 7. In the \"Permissions\" tab, select these scopes:"
        echo "    - files.metadata.write"
        echo "    - files.metadata.read (implicit with write)"
        echo "    - files.content.write"
        echo "    - files.content.read"
        echo " 8. Click on \"Submit\""
        echo " 9. In the \"Settings\" tab, under the \"OAuth 2\" section, select"
        echo "    \"No expiration\" under \"Access token expiration\" and click on"
        echo "    the \"generate\" button under \"Generate access token\""
        echo " "
        read -rp "10. Insert here the generated access token: " token
        if [ -z "${token}" ]; then
            echo "Invalid token"
            exit 1
        fi
        echo "${token}" | (umask 266 && cat > "${DBSYNC_TOKEN_FILE}")

    done
}

function db_call()
{
    local endpoint args

    endpoint=${1}
    shift
    args=$*

    eval curl --silent --request POST \
        --header \'Authorization: Bearer "$(cat "${DBSYNC_TOKEN_FILE}")"\' \
                "${endpoint}" "${args}"
}

function db_up()
{
    local lfile ltime body

    lfile="$1"
    ltime=$(epoch_to_iso "$(local_time "$lfile")")

    # shellcheck disable=SC1083
    body=$(db_call "${DBSYNC_CONTENT_ENDPOINT}"/upload \
        --header \'Dropbox-API-Arg: \
            { \"path\"            : \""${rfile}"\", \
              \"client_modified\" : \""${ltime}"\",   \
              \"mode\"            : \"overwrite\" \
            }\' \
        --header \'Content-Type: application/octet-stream\' \
        --data-binary @"${lfile}")
    say "${body}"
}

function db_down()
{
    local lfile rfile body

    lfile="$1"
    rfile="$2"

    # shellcheck disable=SC1083
    body=$(db_call "${DBSYNC_CONTENT_ENDPOINT}"/download \
        --header \'Dropbox-API-Arg: { \"path\" : \""${rfile}"\" }\' \
        -o "${lfile}")
    say "${body}"
}

function db_metadata()
{
    local rfile

    rfile="$1"
    # shellcheck disable=SC1083
    db_call "${DBSYNC_FILES_ENDPOINT}"/get_metadata \
        --header \'Content-Type: application/json\' \
        --data \'{\"path\": \""${rfile}"\"}\'
}

function metadata_hash()
{
    local metadata

    metadata="${1}"

    echo "${metadata}" | jq -r .content_hash
}

function metadata_time()
{
    local metadata

    metadata="${1}"

    iso_to_epoch "$(echo "${metadata}" | jq -r .client_modified)"
}

function raw_sha256()
{
    openssl dgst -sha256 -hex | awk '{print $2}'
}

function math_add()
{
    local x y

    x="${1}"
    y="${2}"

    dc -e "${x} ${y} + p"
}

function math_mul()
{
    local x y

    x="${1}"
    y="${2}"

    dc -e "${x} ${y} * p"
}

function math_div()
{
    local x y

    x="${1}"
    y="${2}"

    dc -e "${x} ${y} / p"
}

function math_inc()
{
    local x

    x="${1}"

    math_add "${x}" 1
}

function local_hash()
{
    local lfile size bsize block blocks bhash hash

    lfile="$1"
    size=$(stat -f %z "${lfile}")
    bsize=4194304
    blocks=$(math_div "${size}" "${bsize}")
    if [ "$(math_mul "${blocks}" "${bsize}")" -lt "${size}" ]; then
        blocks=$(math_inc "${blocks}")
    fi
    hash=""
    block=0
    while [ "${block}" -lt "${blocks}" ]; do
        bhash=$(dd bs="${bsize}" count=1 skip="${block}" if="${lfile}" 2> /dev/null | raw_sha256)
        hash="${hash}${bhash}"
        block=$(math_inc "${block}")
    done
    # shellcheck disable=SC2001
    echo -ne "$(echo "${hash}" | sed 's|\(..\)|\\x\1|g')" | raw_sha256
}

function local_time()
{
    local lfile

    lfile="$1"
    stat -f "%m" "${lfile}"
}

function is_yes()
{
    local s

    s="${1}"

    [ "${s}" = yes ] || [ "${s}" = DBSYNC_YES ] || [ "${s}" = Y ] || [ "${s}" = y ]
}

function say()
{
    if [ "$DBSYNC_QUIET" -eq 1 ]; then
        return
    fi

    echo "$@"
}

function ask()
{
    local prompt default choice resp

    if [ "$DBSYNC_YES" -eq 1 ]; then
        return 0
    fi

    prompt="${1}"
    default="${2}"

    if is_yes "${default}"; then
        choice="[Yn]"
    else
        choice="[yN]"
    fi

    read -rp "${prompt}? ${choice} " resp
    if [ -z "${resp}" ]; then
        resp="${default}"
    fi

    is_yes "${resp}"
}

function sync_one()
{
    local lfile rfile metadata lhash rhash ltime rtime

    lfile="$1"
    rfile="$2"

    if [ ! -f "$lfile" ]; then
        ask "${lfile} does not exist, download" yes && db_down "$lfile" "$rfile"
        return
    fi

    metadata=$(db_metadata "$rfile")
    lhash=$(local_hash "$lfile")
    rhash=$(metadata_hash "${metadata}")
    if [ "${rhash}" = "null" ]; then
        ask "${lfile} is newer, upload" yes && db_up "$lfile" "$rfile"
        return
    fi
    if [ "${lhash}" = "${rhash}" ]; then
        say "${lfile} hasn't changed"
        return
    fi

    ltime=$(local_time "$lfile")
    rtime=$(metadata_time "${metadata}")
    if [ "${ltime}" -lt "${rtime}" ]; then
        ask "${lfile} is older, download" yes && db_down "$lfile" "$rfile"
    elif [ "${rtime}" -lt "${ltime}" ]; then
        ask "${lfile} is newer, upload" yes && db_up "$lfile" "$rfile"
    fi
}

function sync()
{
    while [ $# -ne 0 ]; do
        lfile="$1"
        rfile="$2"
        shift 2
        sync_one "$lfile" "$rfile"
    done
}

function prepare_config()
{
    if !  mkdir -p "$DBSYNC_HOME"; then
        echo "Cannot create $DBSYNC_HOME"
        exit 1
    fi
}

while [ $# -gt 2 ]; do
    case "$1" in
        "-q")
            DBSYNC_QUIET=1
            shift
            ;;
        "-y")
            DBSYNC_YES=1
            shift
            ;;
        *)
            break
            ;;
    esac
done

prepare_config
db_gen_token
sync "$@"

# vim: ts=4 sw=4 expandtab:
